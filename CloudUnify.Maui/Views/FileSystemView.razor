@page "/filesystem"
@using CloudUnify.Core
@using CloudUnify.Core.Interfaces
@using CloudUnify.Core.Models
@using CloudUnify.Maui.Models
@using CloudUnify.Maui.Services
@using CloudUnify.Maui.ViewModels
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject FileSystemViewModel ViewModel
@inject SecureStorageService SecureStorageService
@inject NavigationService NavigationService
@inject CloudUnifyManager CloudUnifyManager
@inject IProviderStorage ProviderStorage

<div class="file-system-container">
    <div class="toolbar">
        <div class="toolbar-main">
            <div class="breadcrumb-container">
                @foreach (var (name, path) in ViewModel.BreadcrumbItems) {
                    <span class="breadcrumb-item">
                        <a @onclick="@(() => ViewModel.NavigateToFolder(path))"
                           class="@(path == ViewModel.CurrentPath ? "active" : "")">
                            @name
                        </a>
                    </span>
                    @if (path != ViewModel.CurrentPath) {
                        <span class="breadcrumb-separator">/</span>
                    }
                }
            </div>
        </div>
        <div class="provider-selector">
            <div class="provider-list">
                <button
                    class="provider-button @(ViewModel.CurrentProviderId == null ? "active" : "")"
                    @onclick="@(() => ViewModel.SwitchToUnifiedView())">
                    <i class="bi bi-collection"></i>
                    <div class="provider-info">
                        <span class="provider-name">All Providers</span>
                        <span class="provider-storage">Unified View</span>
                    </div>
                </button>
                @foreach (var provider in ViewModel.AvailableProviders) {
                    <button
                        class="provider-button @(provider.ProviderId == ViewModel.CurrentProviderId ? "active" : "")"
                        @onclick="@(() => ViewModel.CurrentProviderId = provider.ProviderId)">
                        <i class="bi bi-@GetProviderIcon(provider.ProviderType)"></i>
                        <div class="provider-info">
                            <span class="provider-name">@provider.AccountName</span>
                            <span
                                class="provider-storage">@FormatFileSize(provider.UsedSpace) / @FormatFileSize(provider.TotalSpace)</span>
                        </div>
                    </button>
                }
                <button class="provider-button add-provider" @onclick="ShowAddProviderDialog">
                    <i class="bi bi-plus-circle"></i>
                    <span>Add Provider</span>
                </button>
            </div>
        </div>
        <div class="actions">
            <button class="action-button primary" @onclick="ShowUploadDialog"
                    disabled="@(ViewModel.CurrentProviderId == null)">
                <i class="bi bi-upload"></i>
                <span>Upload</span>
            </button>
            <button class="action-button primary" @onclick="@(() => ShowNewFolderDialog())"
                    disabled="@(ViewModel.CurrentProviderId == null)">
                <i class="bi bi-folder-plus"></i>
                <span>New Folder</span>
            </button>
            <button class="action-button" @onclick="@(() => ViewModel.DeleteSelected())"
                    disabled="@(!ViewModel.SelectedItems.Any())">
                <i class="bi bi-trash"></i>
                <span>Delete</span>
            </button>
            <button class="action-button" @onclick="@(() => ViewModel.ToggleViewMode())">
                <i class="bi bi-@(ViewModel.IsGridView ? "list" : "grid-3x3-gap")"></i>
                <span>@(ViewModel.IsGridView ? "List View" : "Grid View")</span>
            </button>
            <button class="action-button" @onclick="@(() => ViewModel.IsMultiSelect = !ViewModel.IsMultiSelect)">
                <i class="bi bi-@(ViewModel.IsMultiSelect ? "check-square" : "square")"></i>
                <span>Select</span>
            </button>
        </div>
    </div>

    <div class="content-area">
        @if (ViewModel.IsBusy) {
            <div class="loading-overlay">
                <div class="spinner"></div>
                <span>Loading...</span>
            </div>
        }
        else if (!ViewModel.Items.Any()) {
            <div class="empty-state">
                <i class="bi bi-folder2-open"></i>
                <h3>This folder is empty</h3>
                @if (ViewModel.CurrentProviderId != null) {
                    <p>Upload files or create a new folder to get started</p>
                    <button class="action-button primary" @onclick="@(() => ShowNewFolderDialog())">
                        <i class="bi bi-folder-plus"></i>
                        <span>New Folder</span>
                    </button>
                }
            </div>
        }
        else {
            <div class="@(ViewModel.IsGridView ? "file-grid" : "file-list")">
                @foreach (var item in ViewModel.Items) {
                    <div class="file-item @(item.IsSelected ? "selected" : "")"
                         @onclick="@(() => OnItemClick(item))"
                         @oncontextmenu="@(e => ShowContextMenu(e, item))"
                         @oncontextmenu:preventDefault="true">
                        <div class="file-icon">
                            @if (item.IsFolder) {
                                <i class="bi bi-folder-fill"></i>
                            }
                            else {
                                <i class="bi bi-@GetFileIcon(item)"></i>
                            }
                            @if (ViewModel.IsMultiSelect) {
                                <div class="selection-overlay">
                                    <i class="bi bi-@(item.IsSelected ? "check-circle-fill" : "circle")"></i>
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(item.Provider) && ViewModel.CurrentProviderId == null) {
                                <div class="provider-indicator"
                                     style="background-color: @GetProviderColor(item.Provider)">
                                    <i class="bi bi-@GetProviderIcon(item.Provider)"></i>
                                </div>
                            }
                        </div>
                        <div class="file-details">
                            <div class="file-name" title="@item.Name">@item.Name</div>
                            <div class="file-info">
                                @if (!item.IsFolder) {
                                    <span class="file-size">@FormatFileSize(item.Size)</span>
                                }
                                <span class="file-date">@item.ModifiedAt.ToString("MMM d, yyyy")</span>
                                @if (ViewModel.CurrentProviderId == null) {
                                    var providerInfo = ProviderStorage.GetProvider(item.Provider);
                                    var displayName = providerInfo?.Name ?? item.Provider;
                                    <span class="file-provider"
                                          style="background-color: @GetProviderColor(item.Provider)">
                                        <i class="bi bi-@GetProviderIcon(item.Provider)"></i>
                                        @displayName
                                    </span>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>

    @if (_showNewFolderDialog) {
        <div class="modal-backdrop" @onclick="@(() => _showNewFolderDialog = false)">
            <div class="modal-dialog" @onclick:stopPropagation="true">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3>Create New Folder</h3>
                        <button class="close-button" @onclick="@(() => _showNewFolderDialog = false)">
                            <i class="bi bi-x"></i>
                        </button>
                    </div>
                    <div class="modal-body">
                        <input type="text" @bind="_newFolderName" placeholder="Folder name"
                               @onkeyup="@(e => {
                                             if (e.Key == "Enter") CreateNewFolder();
                                         })"/>
                    </div>
                    <div class="modal-footer">
                        <button class="secondary" @onclick="@(() => _showNewFolderDialog = false)">Cancel</button>
                        <button class="primary" @onclick="@CreateNewFolder">Create</button>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (_contextMenuItem != null) {
        <div class="context-menu" style="left: @(_contextMenuX)px; top: @(_contextMenuY)px">
            @if (_contextMenuItem.IsDirectory) {
                <div class="context-menu-item" @onclick="@(() => ViewModel.NavigateToFolder(_contextMenuItem.Path))">
                    <i class="bi bi-folder2-open"></i>
                    <span>Open</span>
                </div>
            }
            <div class="context-menu-item" @onclick="@(() => RenameItem(_contextMenuItem))">
                <i class="bi bi-pencil"></i>
                <span>Rename</span>
            </div>
            <div class="context-menu-item" @onclick="@(() => DeleteItems(new[] { _contextMenuItem }))">
                <i class="bi bi-trash"></i>
                <span>Delete</span>
            </div>
        </div>
    }

    @if (_showAddProviderDialog) {
        <div class="modal-backdrop" @onclick="@(() => _showAddProviderDialog = false)">
            <div class="modal-dialog modal-dialog-centered" @onclick:stopPropagation="true">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">Add Storage Provider</h3>
                        <button class="close-button" @onclick="@(() => _showAddProviderDialog = false)">
                            <i class="bi bi-x"></i>
                        </button>
                    </div>
                    @if (_selectedProvider == null) {
                        <div class="modal-body">
                            <div class="provider-options">
                                <button class="provider-option"
                                        @onclick="@(() => SelectProvider(StorageProvider.GoogleDrive))">
                                    <div class="provider-icon google">
                                        <i class="bi bi-google"></i>
                                    </div>
                                    <div class="provider-info">
                                        <span class="provider-name">Google Drive</span>
                                        <span class="provider-description">Connect your Google Drive account</span>
                                    </div>
                                </button>
                                <button class="provider-option"
                                        @onclick="@(() => SelectProvider(StorageProvider.OneDrive))">
                                    <div class="provider-icon onedrive">
                                        <i class="bi bi-microsoft"></i>
                                    </div>
                                    <div class="provider-info">
                                        <span class="provider-name">OneDrive</span>
                                        <span
                                            class="provider-description">Connect your Microsoft OneDrive account</span>
                                    </div>
                                </button>
                            </div>
                        </div>
                    }
                    else {
                        <div class="modal-body">
                            <form @onsubmit="ConnectSelectedProvider">
                                <div class="mb-3">
                                    <label for="providerName" class="form-label">Provider Name</label>
                                    <input type="text" class="form-control" id="providerName" @bind="_providerName"
                                           required>
                                    <div class="form-text">A friendly name for this provider (e.g.,
                                        "@(_selectedProvider == StorageProvider.GoogleDrive ? "Work Google Drive" : "Work OneDrive")").
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label for="userId" class="form-label">User ID</label>
                                    <input type="email" class="form-control" id="userId" @bind="_userId" required>
                                    <div class="form-text">
                                        Your @(_selectedProvider == StorageProvider.GoogleDrive ? "Google" : "Microsoft") account
                                        email address.
                                    </div>
                                </div>
                                <div class="d-flex justify-content-between">
                                    <button type="button" class="btn btn-secondary" @onclick="CancelProviderSelection">
                                        Back
                                    </button>
                                    <button type="submit" class="btn btn-primary">Connect</button>
                                </div>
                            </form>
                        </div>
                    }
                </div>
            </div>
        </div>
    }

    @if (_showRenameProviderDialog) {
        <div class="modal-backdrop" @onclick="@(() => _showRenameProviderDialog = false)">
            <div class="modal-dialog modal-dialog-centered" @onclick:stopPropagation="true">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">Rename Provider</h3>
                        <button class="close-button" @onclick="@(() => _showRenameProviderDialog = false)">
                            <i class="bi bi-x"></i>
                        </button>
                    </div>
                    <div class="modal-body">
                        <form @onsubmit="RenameSelectedProvider">
                            <div class="mb-3">
                                <label for="newProviderName" class="form-label">New Provider Name</label>
                                <input type="text" class="form-control" id="newProviderName" @bind="_newProviderName"
                                       required>
                                <div class="form-text">Enter a new friendly name for this provider.</div>
                            </div>
                            <div class="d-flex justify-content-between">
                                <button type="button" class="btn btn-secondary"
                                        @onclick="@(() => _showRenameProviderDialog = false)">Cancel
                                </button>
                                <button type="submit" class="btn btn-primary">Save</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (_showUploadDialog) {
        <div class="modal-backdrop" @onclick="@(() => HideUploadDialog())">
            <div class="modal-dialog" @onclick:stopPropagation="true">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3>Upload File</h3>
                        <button class="close-button" @onclick="@(() => HideUploadDialog())">
                            <i class="bi bi-x"></i>
                        </button>
                    </div>
                    <div class="modal-body">
                        @if (ViewModel.CurrentProviderId == null) {
                            <div class="form-group">
                                <label>Select Provider</label>
                                <select class="form-select" @bind="_selectedUploadProviderId">
                                    <option value="">Choose a provider...</option>
                                    @foreach (var provider in ViewModel.AvailableProviders) {
                                        <option value="@provider.ProviderId">@provider.AccountName</option>
                                    }
                                </select>
                            </div>
                        }
                        <div class="form-group">
                            <label>Select File</label>
                            <InputFile class="form-control" OnChange="@(async e => await HandleFileSelectAsync(e))"/>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="secondary" @onclick="@(() => HideUploadDialog())">Cancel</button>
                        <button class="primary" @onclick="@(async () => await UploadFileAsync())"
                                disabled="@(!CanUpload)">
                            <i class="bi bi-upload"></i>
                            Upload
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .file-system-container {
        display: flex;
        flex-direction: column;
        height: 100%;
        background-color: #f8f9fa;
    }

    .toolbar {
        position: sticky;
        top: 0;
        z-index: 100;
        background-color: white;
        padding: 12px 24px;
        border-bottom: 1px solid #e0e0e0;
        display: flex;
        flex-direction: column;
        gap: 12px;
    }

    .toolbar-main {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 16px;
    }

    .breadcrumb-container {
        display: flex;
        align-items: center;
        font-size: 1.1em;
        color: #5f6368;
        flex-wrap: wrap;
    }

    .breadcrumb-item {
        display: inline-flex;
        align-items: center;
    }

    .breadcrumb-item a {
        color: #5f6368;
        text-decoration: none;
        padding: 4px 8px;
        border-radius: 4px;
        cursor: pointer;
    }

    .breadcrumb-item a:hover {
        background-color: #f1f3f4;
    }

    .breadcrumb-item a.active {
        color: #1a73e8;
        font-weight: 500;
    }

    .breadcrumb-separator {
        margin: 0 4px;
        color: #5f6368;
    }

    .actions {
        display: flex;
        gap: 8px;
        flex-wrap: wrap;
    }

    .action-button {
        display: inline-flex;
        align-items: center;
        gap: 8px;
        padding: 8px 16px;
        border: none;
        background-color: #f1f3f4;
        color: #3c4043;
        border-radius: 4px;
        cursor: pointer;
        font-size: 0.875rem;
        transition: background-color 0.2s;
    }

    .action-button:hover {
        background-color: #e8eaed;
    }

    .action-button.primary {
        background-color: #1a73e8;
        color: white;
    }

    .action-button.primary:hover {
        background-color: #1557b0;
    }

    .action-button:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .content-area {
        flex: 1;
        overflow: auto;
        padding: 20px;
        position: relative;
    }

    .loading-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(255, 255, 255, 0.8);
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        gap: 16px;
    }

    .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid #f3f3f3;
        border-top: 4px solid #1a73e8;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    .empty-state {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 48px;
        color: #5f6368;
        text-align: center;
    }

    .empty-state i {
        font-size: 48px;
        margin-bottom: 16px;
    }

    .empty-state h3 {
        margin: 0;
        margin-bottom: 8px;
        color: #3c4043;
    }

    .empty-state p {
        margin: 0;
        margin-bottom: 16px;
    }

    .file-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 16px;
    }

    .file-list {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .file-list .file-item {
        display: flex;
        align-items: center;
        padding: 8px 16px;
    }

    .file-list .file-icon {
        margin-right: 16px;
    }

    .file-list .file-details {
        flex: 1;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .file-list .file-info {
        display: flex;
        gap: 24px;
    }

    .file-item {
        background-color: white;
        border-radius: 8px;
        padding: 16px;
        cursor: pointer;
        transition: all 0.2s;
        border: 1px solid transparent;
        position: relative;
    }

    .file-item:hover {
        background-color: #f8f9fa;
        border-color: #e0e0e0;
    }

    .file-item.selected {
        background-color: #e8f0fe;
        border-color: #1a73e8;
    }

    .file-icon {
        position: relative;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 24px;
        color: #5f6368;
    }

    .file-icon i {
        transition: all 0.2s;
    }

    .file-item:hover .file-icon i {
        transform: scale(1.1);
    }

    .file-details {
        margin-top: 12px;
    }

    .file-name {
        font-weight: 500;
        color: #3c4043;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .file-info {
        margin-top: 4px;
        font-size: 12px;
        color: #5f6368;
        display: flex;
        gap: 8px;
    }

    .file-size {
        color: #1a73e8;
    }

    .file-provider {
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 0.75rem;
        color: white;
        display: inline-flex;
        align-items: center;
        gap: 4px;
    }

    .file-provider i {
        font-size: 0.875rem;
    }

    @* Escape the @ symbol for CSS @keyframes in Razor *@

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }
        100% {
            transform: rotate(360deg);
        }
    }

    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1050;
    }

    .modal-dialog {
        width: 100%;
        max-width: 500px;
        margin: 0;
    }

    .modal-content {
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }

    .modal-header {
        padding: 16px 24px;
        border-bottom: 1px solid #e0e0e0;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .modal-title {
        font-size: 1.25rem;
        font-weight: 500;
        margin: 0;
    }

    .close-button {
        background: none;
        border: none;
        font-size: 1.25rem;
        color: #666;
        cursor: pointer;
        padding: 4px;
        border-radius: 4px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .close-button:hover {
        background-color: #f5f5f5;
        color: #333;
    }

    .modal-body {
        padding: 24px;
    }

    .modal-footer {
        padding: 16px 24px;
        border-top: 1px solid #e0e0e0;
        display: flex;
        justify-content: flex-end;
        gap: 12px;
    }

    .modal-footer button {
        padding: 8px 24px;
        border: none;
        border-radius: 4px;
        font-size: 0.875rem;
        cursor: pointer;
    }

    .modal-footer button.secondary {
        background-color: transparent;
        color: #1a73e8;
    }

    .modal-footer button.secondary:hover {
        background-color: #f1f3f4;
    }

    .modal-footer button.primary {
        background-color: #1a73e8;
        color: white;
    }

    .modal-footer button.primary:hover {
        background-color: #1557b0;
    }

    .context-menu {
        position: fixed;
        background: white;
        border-radius: 4px;
        min-width: 180px;
        box-shadow: 0 2px 6px 2px rgba(60, 64, 67, 0.15);
        z-index: 1000;
    }

    .context-menu-item {
        padding: 8px 16px;
        display: flex;
        align-items: center;
        gap: 12px;
        cursor: pointer;
        color: #3c4043;
        transition: background-color 0.2s;
    }

    .context-menu-item:hover {
        background-color: #f1f3f4;
    }

    .context-menu-item i {
        font-size: 1.1em;
        color: #5f6368;
    }

    .provider-indicator {
        position: absolute;
        bottom: -4px;
        right: -4px;
        width: 16px;
        height: 16px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 10px;
        color: white;
        border: 2px solid white;
    }

    .provider-indicator i {
        font-size: 8px;
    }

    .provider-selector {
        padding: 8px 0;
        border-bottom: 1px solid #e0e0e0;
        transition: all 0.3s ease;
    }

    .provider-selector.hidden {
        display: none;
    }

    .provider-list {
        display: flex;
        gap: 8px;
        overflow-x: auto;
        padding: 0 24px;
    }

    .provider-button {
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 12px 16px;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        background: white;
        cursor: pointer;
        min-width: 200px;
        transition: all 0.2s;
    }

    .provider-button:hover {
        background-color: #f8f9fa;
        border-color: #dadce0;
    }

    .provider-button.active {
        background-color: #e8f0fe;
        border-color: #1a73e8;
    }

    .provider-button i {
        font-size: 1.5em;
        color: #5f6368;
    }

    .provider-info {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        gap: 4px;
    }

    .provider-name {
        font-weight: 500;
        color: #3c4043;
    }

    .provider-storage {
        font-size: 0.75rem;
        color: #5f6368;
    }

    .add-provider {
        border-style: dashed;
    }

    .provider-options {
        display: flex;
        flex-direction: column;
        gap: 12px;
    }

    .provider-option {
        display: flex;
        align-items: center;
        gap: 16px;
        padding: 16px;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        background: white;
        cursor: pointer;
        transition: all 0.2s;
        width: 100%;
        text-align: left;
    }

    .provider-option:hover {
        background-color: #f8f9fa;
        border-color: #1a73e8;
        transform: translateY(-1px);
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }

    .provider-icon {
        width: 40px;
        height: 40px;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 20px;
        color: white;
    }

    .provider-icon.google {
        background-color: #4285F4;
    }

    .provider-icon.onedrive {
        background-color: #0078D4;
    }

    .provider-icon.dropbox {
        background-color: #0061FF;
    }

    .provider-info {
        display: flex;
        flex-direction: column;
        gap: 4px;
    }

    .provider-name {
        font-weight: 500;
        color: #3c4043;
        font-size: 1rem;
    }

    .provider-description {
        color: #5f6368;
        font-size: 0.875rem;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .form-group label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
        color: #3c4043;
    }

    .form-control {
        display: block;
        width: 100%;
        padding: 0.5rem 0.75rem;
        font-size: 1rem;
        line-height: 1.5;
        color: #3c4043;
        background-color: #fff;
        border: 1px solid #dadce0;
        border-radius: 4px;
        transition: border-color 0.2s ease-in-out;
    }

    .form-control:focus {
        outline: none;
        border-color: #1a73e8;
        box-shadow: 0 0 0 2px rgba(26, 115, 232, 0.2);
    }

    .form-text {
        display: block;
        margin-top: 0.25rem;
        font-size: 0.875rem;
    }

    .text-muted {
        color: #5f6368;
    }

    .btn {
        display: inline-block;
        padding: 0.5rem 1rem;
        font-size: 1rem;
        font-weight: 500;
        text-align: center;
        text-decoration: none;
        border: 1px solid transparent;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.2s;
    }

    .btn-primary {
        background-color: #1a73e8;
        color: white;
        border-color: #1a73e8;
    }

    .btn-primary:hover {
        background-color: #1557b0;
        border-color: #1557b0;
    }

    .btn-secondary {
        background-color: transparent;
        color: #3c4043;
        border-color: #dadce0;
    }

    .btn-secondary:hover {
        background-color: #f1f3f4;
    }

    .card {
        border: none;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s, box-shadow 0.2s;
    }

    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .card-header {
        border-bottom: none;
        padding: 1.5rem;
    }

    .card-body {
        padding: 2rem;
    }

    .form-label {
        font-weight: 500;
        color: #3c4043;
        margin-bottom: 0.5rem;
    }

    .form-control {
        display: block;
        width: 100%;
        padding: 0.5rem 0.75rem;
        font-size: 1rem;
        line-height: 1.5;
        color: #3c4043;
        background-color: #fff;
        border: 1px solid #dadce0;
        border-radius: 4px;
        transition: border-color 0.2s ease-in-out;
    }

    .form-control:focus {
        outline: none;
        border-color: #1a73e8;
        box-shadow: 0 0 0 2px rgba(26, 115, 232, 0.2);
    }

    .form-text {
        display: block;
        margin-top: 0.25rem;
        font-size: 0.875rem;
        color: #5f6368;
    }

    .mb-3 {
        margin-bottom: 1rem;
    }
</style>

@code {
    private bool _showNewFolderDialog;
    private bool _showAddProviderDialog;
    private bool _showRenameProviderDialog;
    private bool _showUploadDialog;
    private string _newFolderName;
    private FileSystemItem _contextMenuItem;
    private double _contextMenuX;
    private double _contextMenuY;
    private StorageProvider? _selectedProvider;
    private string _userId = "";
    private string _providerName = "";
    private string _newProviderName = "";
    private StorageProviderInfo? _selectedProviderForRename;
    private string _selectedUploadProviderId = "";
    private IBrowserFile? _selectedFile;

    protected override void OnInitialized() {
        // Close context menu when clicking outside
        JSRuntime.InvokeVoidAsync("document.addEventListener", "click", () => {
            if (_contextMenuItem != null) {
                _contextMenuItem = null;
                StateHasChanged();
            }
        });
    }

    private string GetProviderIcon(StorageProvider provider) {
        return provider switch {
            StorageProvider.GoogleDrive => "google",
            StorageProvider.OneDrive => "microsoft",
            StorageProvider.Dropbox => "dropbox",
            _ => "cloud"
        };
    }

    private void ShowAddProviderDialog() {
        _showAddProviderDialog = true;
        _selectedProvider = null;
        _userId = "";
        _providerName = "";
    }

    private void SelectProvider(StorageProvider provider) {
        _selectedProvider = provider;
        _userId = "";
        _providerName = provider switch {
            StorageProvider.GoogleDrive => "Google Drive",
            StorageProvider.OneDrive => "OneDrive",
            _ => ""
        };
    }

    private void CancelProviderSelection() {
        _selectedProvider = null;
        _userId = "";
        _providerName = "";
    }

    private async Task ConnectSelectedProvider(EventArgs e) {
        if (_selectedProvider == null || string.IsNullOrWhiteSpace(_userId) || string.IsNullOrWhiteSpace(_providerName)) return;

        try {
            var clientSecrets = _selectedProvider.Value switch {
                StorageProvider.GoogleDrive => await SecureStorageService.GetGoogleDriveSecretsAsync(),
                StorageProvider.OneDrive => await SecureStorageService.GetOneDriveSecretsAsync(),
                _ => null
            };

            if (string.IsNullOrEmpty(clientSecrets)) {
                await NavigationService.NavigateToAddStorageAsync();
                return;
            }

            var tempPath = Path.GetTempFileName();
            await File.WriteAllTextAsync(tempPath, clientSecrets);

            try {
                var (providerId, success) = _selectedProvider.Value switch {
                    StorageProvider.GoogleDrive => await CloudUnifyManager.ConnectGoogleDriveAsync(
                        tempPath,
                        "CloudUnify",
                        "token_store",
                        _userId
                    ),
                    StorageProvider.OneDrive => await CloudUnifyManager.ConnectOneDriveAsync(
                        tempPath,
                        "CloudUnify",
                        "token_store",
                        _userId
                    ),
                    _ => (string.Empty, false)
                };

                if (success) {
                    // Update the provider name in storage
                    var provider = ProviderStorage.GetProvider(providerId);
                    if (provider != null) {
                        ProviderStorage.SaveProvider(
                            providerId,
                            provider.Type,
                            _providerName,
                            provider.UserId,
                            provider.ClientSecretsPath
                        );
                    }

                    _showAddProviderDialog = false;
                    _selectedProvider = null;
                    _userId = "";
                    _providerName = "";
                    StateHasChanged();
                }
            }
            finally {
                try {
                    File.Delete(tempPath);
                }
                catch (Exception ex) {
                    Console.WriteLine($"Error deleting temporary file: {ex.Message}");
                }
            }
        }
        catch (Exception ex) {
            Console.WriteLine($"Error connecting provider: {ex.Message}");
        }
    }

    private void OnItemClick(FileSystemItem item) {
        if (ViewModel.IsMultiSelect) {
            ViewModel.ToggleItemSelection(item);
        }
        else if (item.IsDirectory) {
            ViewModel.NavigateToFolder(item.Path);
        }
    }

    private void ShowContextMenu(MouseEventArgs e, FileSystemItem item) {
        _contextMenuItem = item;
        _contextMenuX = e.ClientX;
        _contextMenuY = e.ClientY;
        StateHasChanged();
    }

    private void ShowNewFolderDialog() {
        _newFolderName = "";
        _showNewFolderDialog = true;
    }

    private void CreateNewFolder() {
        if (!string.IsNullOrWhiteSpace(_newFolderName)) {
            ViewModel.CreateNewFolder(_newFolderName);
            _showNewFolderDialog = false;
        }
    }

    private async Task RenameItem(FileSystemItem item) {
        var newName = await JSRuntime.InvokeAsync<string>("prompt", "Enter new name:", item.Name);
        if (!string.IsNullOrWhiteSpace(newName)) {
            ViewModel.RenameItem(item, newName);
        }

        _contextMenuItem = null;
    }

    private void DeleteItems(IEnumerable<FileSystemItem> items) {
        foreach (var item in items) {
            item.IsSelected = true;
        }

        ViewModel.DeleteSelected();
        _contextMenuItem = null;
    }

    private string FormatFileSize(long bytes) {
        string[] sizes = { "B", "KB", "MB", "GB" };
        var order = 0;
        double size = bytes;

        while (size >= 1024 && order < sizes.Length - 1) {
            order++;
            size = size / 1024;
        }

        return $"{size:0.##} {sizes[order]}";
    }

    private string GetFileIcon(FileSystemItem item) {
        if (item.IsFolder) return "folder-fill";

        return item.Extension?.ToLowerInvariant() switch {
            ".pdf" => "file-pdf",
            ".doc" or ".docx" => "file-word",
            ".xls" or ".xlsx" => "file-excel",
            ".ppt" or ".pptx" => "file-ppt",
            ".txt" => "file-text",
            ".jpg" or ".jpeg" or ".png" or ".gif" => "file-image",
            ".mp3" or ".wav" or ".ogg" => "file-music",
            ".mp4" or ".avi" or ".mkv" => "file-play",
            ".zip" or ".rar" or ".7z" => "file-zip",
            _ => "file"
        };
    }

    private string GetProviderColor(string provider) {
        return provider?.ToLowerInvariant() switch {
            "google drive" => "#4285F4",
            "onedrive" => "#0078D4",
            "dropbox" => "#0061FF",
            _ => "#6c757d"
        };
    }

    private string GetProviderIcon(string provider) {
        return provider?.ToLowerInvariant() switch {
            "google drive" => "google",
            "onedrive" => "microsoft",
            "dropbox" => "dropbox",
            _ => "cloud"
        };
    }

    private void ShowRenameProviderDialog(StorageProviderInfo provider) {
        _selectedProviderForRename = provider;
        _newProviderName = provider.AccountName;
        _showRenameProviderDialog = true;
    }

    private async Task RenameSelectedProvider() {
        if (_selectedProviderForRename == null || string.IsNullOrWhiteSpace(_newProviderName)) return;

        var provider = ProviderStorage.GetProvider(_selectedProviderForRename.ProviderId);
        if (provider != null) {
            ProviderStorage.SaveProvider(
                provider.Id,
                provider.Type,
                _newProviderName,
                provider.UserId,
                provider.ClientSecretsPath
            );

            // Refresh the view by updating the provider name in the ViewModel
            var existingProvider = ViewModel.AvailableProviders.FirstOrDefault(p => p.ProviderId == provider.Id);
            if (existingProvider != null) {
                var index = ViewModel.AvailableProviders.IndexOf(existingProvider);
                ViewModel.AvailableProviders[index] = new StorageProviderInfo {
                    ProviderId = existingProvider.ProviderId,
                    ProviderType = existingProvider.ProviderType,
                    AccountName = _newProviderName,
                    UsedSpace = existingProvider.UsedSpace,
                    TotalSpace = existingProvider.TotalSpace,
                    IsConnected = existingProvider.IsConnected,
                    LastConnected = existingProvider.LastConnected
                };
            }
        }

        _showRenameProviderDialog = false;
        _selectedProviderForRename = null;
        _newProviderName = "";
    }

    private void ShowUploadDialog() {
        _showUploadDialog = true;
        _selectedUploadProviderId = ViewModel.CurrentProviderId ?? "";
        _selectedFile = null;
    }

    private void HideUploadDialog() {
        _showUploadDialog = false;
        _selectedUploadProviderId = "";
        _selectedFile = null;
    }

    private async Task HandleFileSelectAsync(InputFileChangeEventArgs e) {
        _selectedFile = e.File;
        StateHasChanged();
    }

    private bool CanUpload => (!string.IsNullOrEmpty(_selectedUploadProviderId) || ViewModel.CurrentProviderId != null) && _selectedFile != null;

    private async Task UploadFileAsync() {
        if (!CanUpload) return;

        try {
            ViewModel.IsBusy = true;
            using var stream = _selectedFile!.OpenReadStream();
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);

            var providerId = ViewModel.CurrentProviderId ?? _selectedUploadProviderId;
            var uploadedFile = await CloudUnifyManager.UploadFileAsync(
                memoryStream.ToArray(),
                _selectedFile.Name,
                ViewModel.CurrentPath,
                providerId
            );

            await ViewModel.LoadCurrentFolder();
            HideUploadDialog();
        }
        catch (Exception ex) {
            // TODO: Show error message
            Console.WriteLine($"Error uploading file: {ex.Message}");
        }
        finally {
            ViewModel.IsBusy = false;
        }
    }

} 