@inject NavigationService NavigationService
@inject IJSRuntime JSRuntime

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">CloudUnify</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" @onchange="ToggleNavMenu">

<div class="nav-scrollable @(_navMenuVisible ? "show" : "")" @onclick="CloseNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <a href="" class="nav-link @(_currentPath == "/" ? "active" : "")"
               @onclick="@(async () => await NavigateAndCloseAsync("/"))">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </a>
        </div>
        <div class="nav-item px-3">
            <a href="storages" class="nav-link @(_currentPath == "/storages" ? "active" : "")"
               @onclick="@(async () => await NavigateAndCloseAsync("/storages"))">
                <span class="bi bi-folder2-open" aria-hidden="true"></span> Storages
            </a>
        </div>
        <div class="nav-item px-3">
            <a href="files" class="nav-link @(_currentPath == "/files" ? "active" : "")"
               @onclick="@(async () => await NavigateAndCloseAsync("/files"))">
                <span class="bi bi-files" aria-hidden="true"></span> Files
            </a>
        </div>
        <div class="nav-item px-3">
            <a href="add-storage" class="nav-link @(_currentPath == "/add-storage" ? "active" : "")"
               @onclick="@(async () => await NavigateAndCloseAsync("/add-storage"))">
                <span class="bi bi-plus-circle" aria-hidden="true"></span> Add Storage
            </a>
        </div>
    </nav>
</div>

@code {
    private bool _navMenuVisible;
    private string _currentPath = "/";

    protected override async Task OnInitializedAsync() {
        await Task.CompletedTask;
        _currentPath = NavigationService.GetCurrentPath();
    }

    private void ToggleNavMenu(ChangeEventArgs e) {
        _navMenuVisible = (bool)e.Value;
        StateHasChanged();
    }

    private void CloseNavMenu() {
        _navMenuVisible = false;
        StateHasChanged();
    }

    private async Task NavigateAndCloseAsync(string path) {
        await Task.CompletedTask;
        _currentPath = path;
        await NavigationService.NavigateToAsync(path);
        CloseNavMenu();
    }

}