@page "/add-storage"
@using CloudUnify.Core
@using CloudUnify.Core.Models
@using CloudUnify.Core.Interfaces
@using CloudUnify.Maui.Services
@inject NavigationService NavigationService
@inject CloudUnifyManager CloudUnifyManager
@inject IProviderStorage ProviderStorage

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <h2>Add New Storage Provider</h2>
            <p class="text-muted">Choose a storage provider to connect to your account.</p>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-md-6">
            <div class="card h-100">
                <div class="card-body">
                    <h5 class="card-title">Google Drive</h5>
                    <p class="card-text">Connect to your Google Drive account to access and manage your files.</p>
                    <button class="btn btn-primary" @onclick="() => ShowProviderForm(StorageProvider.GoogleDrive)">Connect Google Drive</button>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card h-100">
                <div class="card-body">
                    <h5 class="card-title">OneDrive</h5>
                    <p class="card-text">Connect to your OneDrive account to access and manage your files.</p>
                    <button class="btn btn-primary" @onclick="() => ShowProviderForm(StorageProvider.OneDrive)">Connect OneDrive</button>
                </div>
            </div>
        </div>
    </div>

    @if (_showProviderForm)
    {
        <div class="row mt-4">
            <div class="col-md-8 offset-md-2">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Connect to @(_selectedProvider == StorageProvider.GoogleDrive ? "Google Drive" : "OneDrive")</h5>
                        <form @onsubmit="ConnectProvider">
                            <div class="mb-3">
                                <label for="clientSecretsPath" class="form-label">Client Secrets File Path</label>
                                <input type="text" class="form-control" id="clientSecretsPath" @bind="_clientSecretsPath" required>
                                <div class="form-text">Path to your client_secret.json file from @(_selectedProvider == StorageProvider.GoogleDrive ? "Google Cloud Console" : "Microsoft Azure Portal").</div>
                            </div>
                            <div class="mb-3">
                                <label for="providerName" class="form-label">Provider Name</label>
                                <input type="text" class="form-control" id="providerName" @bind="_providerName" required>
                                <div class="form-text">A friendly name for this provider (e.g., "@(_selectedProvider == StorageProvider.GoogleDrive ? "Work Google Drive" : "Work OneDrive")").</div>
                            </div>
                            <div class="mb-3">
                                <label for="userId" class="form-label">User ID</label>
                                <input type="email" class="form-control" id="userId" @bind="_userId" required>
                                <div class="form-text">Your @(_selectedProvider == StorageProvider.GoogleDrive ? "Google" : "Microsoft") account email address.</div>
                            </div>
                            <div class="d-flex justify-content-between">
                                <button type="button" class="btn btn-secondary" @onclick="HideProviderForm">Cancel</button>
                                <button type="submit" class="btn btn-primary">Connect</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    }

    <div class="row mt-4">
        <div class="col-12">
            <button class="btn btn-outline-secondary" @onclick="NavigateBack">
                <i class="bi bi-arrow-left"></i> Back to Storages
            </button>
        </div>
    </div>
</div>

@code {
    private bool _showProviderForm;
    private StorageProvider _selectedProvider;
    private string _clientSecretsPath = "";
    private string _providerName = "";
    private string _userId = "";

    private void ShowProviderForm(StorageProvider provider)
    {
        _selectedProvider = provider;
        _showProviderForm = true;
    }

    private void HideProviderForm()
    {
        _showProviderForm = false;
        _clientSecretsPath = "";
        _providerName = "";
        _userId = "";
    }

    private async Task ConnectProvider()
    {
        try
        {
            var (providerId, success) = _selectedProvider switch
            {
                StorageProvider.GoogleDrive => await CloudUnifyManager.ConnectGoogleDriveAsync(
                    _clientSecretsPath,
                    "CloudUnify",
                    "token_store",
                    _userId
                ),
                StorageProvider.OneDrive => await CloudUnifyManager.ConnectOneDriveAsync(
                    _clientSecretsPath,
                    "CloudUnify",
                    "token_store",
                    _userId
                ),
                _ => throw new ArgumentException("Unsupported provider type")
            };

            if (success)
            {
                // Save provider information
                ProviderStorage.SaveProvider(
                    providerId,
                    _selectedProvider.ToString(),
                    _providerName,
                    _userId,
                    _clientSecretsPath
                );

                await NavigationService.NavigateToStoragesAsync();
            }
            else
            {
                // TODO: Show error message
                Console.WriteLine($"Failed to connect to {_selectedProvider}. Provider ID: {providerId}");
            }
        }
        catch (Exception ex)
        {
            // TODO: Show error message
            Console.WriteLine($"Error connecting to {_selectedProvider}: {ex.Message}");
        }
    }

    private async Task NavigateBack()
    {
        await NavigationService.NavigateToStoragesAsync();
    }
}

<style>
    .add-storage-container {
        padding: 20px;
        background-color: #f5f7fa;
        min-height: 100vh;
    }

    .header {
        display: flex;
        align-items: center;
        margin-bottom: 2rem;
    }

    .back-button {
        background: none;
        border: none;
        font-size: 1.5rem;
        color: #4a5568;
        cursor: pointer;
        padding: 0.5rem;
        margin-right: 1rem;
    }

    h1 {
        font-size: 2rem;
        color: #2d3748;
        margin: 0;
    }

    .providers-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 1.5rem;
        padding: 1rem;
    }

    .provider-card {
        background: white;
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        cursor: pointer;
        transition: transform 0.2s, box-shadow 0.2s;
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
    }

    .provider-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
    }

    .provider-card img {
        width: 64px;
        height: 64px;
        margin-bottom: 1rem;
    }

    .provider-card h3 {
        font-size: 1.25rem;
        color: #2d3748;
        margin: 0.5rem 0;
    }

    .provider-card p {
        color: #718096;
        margin: 0.5rem 0 1rem;
        font-size: 0.9rem;
    }

    .connect-button {
        background-color: #4299e1;
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 6px;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.9rem;
    }

    .connect-button i {
        font-size: 0.8rem;
    }
</style> 