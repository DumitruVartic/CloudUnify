@page "/storages"
@using CloudUnify.Core
@using CloudUnify.Core.Interfaces
@using CloudUnify.Core.Models
@inject NavigationService NavigationService
@inject CloudUnifyManager CloudUnifyManager
@inject IProviderStorage ProviderStorage

<div class="container mt-4">
    <div class="row">
        <div class="col-12 d-flex justify-content-between align-items-center">
            <h2>Storage Providers</h2>
            <button class="btn btn-primary" @onclick="NavigateToAddStorage">
                <i class="bi bi-plus-circle"></i> Add Provider
            </button>
        </div>
    </div>

    @if (_providers == null) {
        <div class="row mt-4">
            <div class="col-12 text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        </div>
    }
    else if (_providers.Count == 0) {
        <div class="row mt-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-body text-center">
                        <i class="bi bi-cloud-slash display-1 text-muted"></i>
                        <h5 class="mt-3">No Storage Providers Connected</h5>
                        <p class="text-muted">Connect your first storage provider to get started.</p>
                        <button class="btn btn-primary" @onclick="NavigateToAddStorage">
                            <i class="bi bi-plus-circle"></i> Add Provider
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
    else {
        <div class="row mt-4">
            @foreach (var provider in _providers) {
                <div class="col-md-6 mb-4">
                    <div class="card h-100">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-start">
                                <div>
                                    <h5 class="card-title">
                                        @if (provider.Type == "GoogleDrive") {
                                            <i class="bi bi-google text-danger"></i>
                                        }
                                        else if (provider.Type == "OneDrive") {
                                            <i class="bi bi-microsoft text-primary"></i>
                                        }
                                        @provider.Name
                                    </h5>
                                    <div class="provider-details">
                                        <p class="text-muted mb-1">
                                            <i class="bi bi-person"></i> @provider.UserId
                                        </p>
                                        <p class="text-muted mb-1">
                                            <i class="bi bi-key"></i> ID: @provider.Id
                                        </p>
                                        <p class="text-muted mb-1">
                                            <i class="bi bi-clock"></i>
                                            Added: @provider.AddedAt.ToString("dd.MM.yyyy HH:mm:ss")
                                        </p>
                                        @if (provider.LastConnected.HasValue) {
                                            <p class="text-muted mb-1">
                                                <i class="bi bi-check-circle"></i> Last
                                                Connected: @provider.LastConnected.Value.ToString("dd.MM.yyyy HH:mm:ss")
                                            </p>
                                        }
                                    </div>
                                </div>
                                <div class="dropdown">
                                    <button class="btn btn-outline-secondary btn-sm" type="button"
                                            data-bs-toggle="dropdown">
                                        <i class="bi bi-three-dots-vertical"></i>
                                    </button>
                                    <ul class="dropdown-menu dropdown-menu-end">
                                        @if (provider.IsConnected) {
                                            <li>
                                                <button class="dropdown-item"
                                                        @onclick="@(async () => await DisconnectProviderAsync(provider.Id, provider.UserId))">
                                                    <i class="bi bi-power"></i> Disconnect
                                                </button>
                                            </li>
                                        }
                                        else {
                                            <li>
                                                <button class="dropdown-item"
                                                        @onclick="@(async () => await ReconnectProviderAsync(provider.Id))">
                                                    <i class="bi bi-plug"></i> Connect
                                                </button>
                                            </li>
                                        }
                                        <li>
                                            <button class="dropdown-item text-danger"
                                                    @onclick="@(async () => await RemoveProviderAsync(provider.Id))">
                                                <i class="bi bi-trash"></i> Remove
                                            </button>
                                        </li>
                                    </ul>
                                </div>
                            </div>

                            @if (provider.IsConnected) {
                                var storageInfo = _storageInfo?.FirstOrDefault(s => s.ProviderId == provider.Id);
                                if (storageInfo != null) {
                                    <div class="mt-3">
                                        <div class="d-flex justify-content-between mb-1">
                                            <small class="text-muted">Storage Usage</small>
                                            <small
                                                class="text-muted">@storageInfo.UsagePercentage.ToString("F2")%</small>
                                        </div>
                                        <div class="progress" style="height: 8px;">
                                            <div
                                                class="progress-bar @(storageInfo.UsagePercentage > 90 ? "bg-danger" : storageInfo.UsagePercentage > 70 ? "bg-warning" : "bg-success")"
                                                role="progressbar"
                                                style="width: @storageInfo.UsagePercentage%"
                                                aria-valuenow="@storageInfo.UsagePercentage"
                                                aria-valuemin="0"
                                                aria-valuemax="100">
                                            </div>
                                        </div>
                                        <div class="d-flex justify-content-between mt-1">
                                            <small class="text-muted">
                                                @FormatBytes(storageInfo.UsedSpace) of @FormatBytes(storageInfo.TotalSpace)
                                            </small>
                                            <small class="text-muted">
                                                @FormatBytes(storageInfo.AvailableSpace) available
                                            </small>
                                        </div>
                                    </div>
                                }
                            }
                            else {
                                <div class="mt-3">
                                    <div class="alert alert-warning d-flex align-items-center" role="alert">
                                        <i class="bi bi-exclamation-triangle me-2"></i>
                                        <div>Provider is disconnected</div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<ProviderInfo>? _providers;
    private List<CloudStorageInfo>? _storageInfo;

    protected override async Task OnInitializedAsync() {
        await CloudUnifyManager.AutoConnectProvidersAsync();
        await LoadProvidersAsync();
        await LoadStorageInfoAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (!firstRender) {
            await CloudUnifyManager.AutoConnectProvidersAsync();
            await LoadProvidersAsync();
            await LoadStorageInfoAsync();
        }
    }

    private async Task LoadProvidersAsync() {
        _providers = ProviderStorage.GetAllProviders();
    }

    private async Task LoadStorageInfoAsync() {
        _storageInfo = await CloudUnifyManager.GetStorageInfoAsync();
    }

    private async Task NavigateToAddStorage() {
        await NavigationService.NavigateToAddStorageAsync();
    }

    private async Task DisconnectProviderAsync(string providerId, string? userId) {
        if (userId == null) return;

        try {
            await CloudUnifyManager.DisconnectProviderAsync(providerId, userId);
            await LoadProvidersAsync();
            await LoadStorageInfoAsync();
        }
        catch (Exception ex) {
            Console.WriteLine($"Error disconnecting provider: {ex.Message}");
        }
    }

    private async Task RemoveProviderAsync(string providerId) {
        try {
            await CloudUnifyManager.RemoveProviderAsync(providerId);
            await LoadProvidersAsync();
            await LoadStorageInfoAsync();
        }
        catch (Exception ex) {
            Console.WriteLine($"Error removing provider: {ex.Message}");
        }
    }

    private async Task ReconnectProviderAsync(string providerId) {
        try {
            var success = await CloudUnifyManager.ReconnectProviderAsync(providerId);
            if (success) {
                await LoadProvidersAsync();
                await LoadStorageInfoAsync();
            }
        }
        catch (Exception ex) {
            Console.WriteLine($"Error reconnecting provider: {ex.Message}");
        }
    }

    private string FormatBytes(long bytes) {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        var order = 0;
        double size = bytes;
        while (size >= 1024 && order < sizes.Length - 1) {
            order++;
            size /= 1024;
        }

        return $"{size:0.##} {sizes[order]}";
    }

}

<style>
    .card {
        border: none;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s, box-shadow 0.2s;
    }

    .card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
    }

    .progress {
        background-color: #e9ecef;
        border-radius: 4px;
    }

    .progress-bar {
        border-radius: 4px;
    }

    .dropdown-menu {
        border: none;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .dropdown-item {
        padding: 0.5rem 1rem;
    }

    .dropdown-item i {
        margin-right: 0.5rem;
    }

    .badge {
        padding: 0.5em 0.75em;
    }

    .provider-details {
        font-size: 0.9rem;
    }

    .provider-details i {
        width: 1.2rem;
        text-align: center;
        margin-right: 0.5rem;
    }

    .card-title {
        margin-bottom: 1rem;
    }

    .card-title i {
        margin-right: 0.5rem;
    }
</style> 